mdp
const double p = 0.2;
const int failstate = -1;
const int open = 1;
const int closed = 0;
const int unknown = -1;
const int keyfound = 1;
const int nokey = 0; 

module grid
s:[failstate .. 13] init 0;
door0:[unknown .. open] init unknown;
door1:[unknown .. open] init unknown;
door0key:[unknown .. keyfound] init unknown;
door1key:[unknown .. keyfound] init unknown;

[s0_s1] (s=0) -> 1.0:(s'=1);
[s0_s2] (s=0) -> 1.0:(s'=2);
[s0_s3] (s=0) -> 1.0:(s'=3);
[s1_s0] (s=1) -> 1.0:(s'=0);
[s1_s3] (s=1) -> 1.0:(s'=3);
[s1_s2] (s=1) -> 1.0:(s'=2);
[s1_s4] (s=1) -> 1.0:(s'=4);
[s4_s1] (s=4) -> 1.0:(s'=1);
[s4_s3] (s=4) -> 1.0:(s'=3);
[s4_s5d] (s=4) & (door0=open)  -> 1.0:(s'=5);
[s4_s5k] (s=4) & (door0key=keyfound) -> 1.0:(s'=5); 
[s5_s6] (s=5) -> 1.0:(s'=6);
[s5_s7] (s=5) -> 1.0:(s'=7);
[s5_s4d] (s=5) & (door0=open) -> 1.0:(s'=4);
[s5_s4k] (s=5) & (door0key=keyfound) -> 1.0:(s'=4);
[s7_s5] (s=7) -> 1.0:(s'=5);
[s7_s6] (s=7) -> 1.0:(s'=6);
[s2_s1] (s=2) -> 1.0:(s'=1);
[s2_s0] (s=2) -> 1.0:(s'=0);
[s2_s8] (s=2) -> 1.0:(s'=8);
[s2_s9] (s=2) -> 1.0:(s'=9);
[s2_s3] (s=2) -> 1.0:(s'=3);
[s3_s1] (s=3) -> 1.0:(s'=1);
[s3_s0] (s=3) -> 1.0:(s'=0);
[s3_s8] (s=3) -> 1.0:(s'=8);
[s3_s9] (s=3) -> 1.0:(s'=9);
[s3_s10] (s=3) -> 1.0:(s'=10);
[s3_s2] (s=3) -> 1.0:(s'=2);
[s3_s4] (s=3) -> 1.0:(s'=4);
[s6_s11] (s=6) -> 1.0:(s'=11);
[s6_s7] (s=6) -> 1.0:(s'=7);
[s6_s5] (s=6) -> 1.0:(s'=5);
[s6_s12] (s=6) -> 1.0:(s'=12);
[s9_s8] (s=9) -> 1.0:(s'=8);
[s9_s2] (s=9) -> 1.0:(s'=2);
[s9_s3] (s=9) -> 1.0:(s'=3);
[s8_s9] (s=8) -> 1.0:(s'=9);
[s8_s10] (s=8) -> 1.0:(s'=10);
[s8_s2] (s=8) -> 1.0:(s'=2);
[s8_s3] (s=8) -> 1.0:(s'=3);
[s10_s8] (s=10) -> 1.0:(s'=8);
[s10_s11d] (s=10) & (door1=open) -> 1.0:(s'=11);
[s10_s11k] (s=10) & (door1key=keyfound) -> 1.0:(s'=11);
[s10_s3] (s=10) -> 1.0:(s'=3);
[s11_s6] (s=11) -> 1.0:(s'=6);
[s11_s10d] (s=11) & (door1=open) -> 1.0:(s'=10);
[s11_s10k] (s=11) & (door1key=keyfound) -> 1.0:(s'=10);
[s11_s12] (s=11) -> 1.0:(s'=12);
[s12_s6] (s=12) -> 1.0:(s'=6);
[s12_s11] (s=12) -> 1.0:(s'=11);
[cdoor0_s4] (s=4) & (door0=unknown) -> p:(s'=4) & (door0'=open) + 1-p:(s'=4) & (door0'=closed);
[cdoor0_s5] (s=5) & (door0=unknown) -> p:(s'=5) & (door0'=open) + 1-p:(s'=5) & (door0'=closed);
[cdoor1_s10] (s=10) & (door1=unknown) -> p:(s'=10) & (door1'=open) + 1-p:(s'=10) & (door1'=closed);
[cdoor1_s11] (s=11) & (door1=unknown) -> p:(s'=11) & (door1'=open) + 1-p:(s'=11) & (door1'=closed);
[lookforkey0_s4] (s=4) & (door0key=unknown) -> p:(s'=4) & (door0key'=keyfound) + 1-p:(s'=4) & (door0key'=nokey);
[lookforkey0_s5] (s=5) & (door0key=unknown) -> p:(s'=5) & (door0key'=keyfound) + 1-p:(s'=5) & (door0key'=nokey);
[lookforkey1_s10] (s=10) & (door1key=unknown) -> p:(s'=10) & (door1key'=keyfound) + 1-p:(s'=10) & (door1key'=nokey);
[lookforkey1_s11] (s=11) & (door1key=unknown) -> p:(s'=11) & (door1key'=keyfound) + 1-p:(s'=11) & (door1key'=nokey);
endmodule


label "s9" = (s=9);
label "s8" = (s=8);
label "s10" = (s=10);
label "s3" = (s=3);
label "s2" = (s=2);
label "s1" = (s=1);
label "s0" = (s=0);
label "s7" = (s=7);
label "s6" = (s=6);
label "s5" = (s=5);
label "s4" = (s=4);
label "s12" = (s=12);
label "s11" = (s=11);


rewards"time"
[s0_s1] (s=0) : 1.0;
[s0_s2] (s=0) : 1.0;
[s0_s3] (s=0) : 1.41421356237;
[s1_s0] (s=1) : 1.0;
[s1_s3] (s=1) : 1.0;
[s1_s2] (s=1) : 1.41421356237;
[s1_s4] (s=1) : 1.0;
[s4_s1] (s=4) : 1.0;
[s4_s3] (s=4) : 1.41421356237;
[s4_s5d] (s=4) & (door0=open) : 1.0;
[s4_s5k] (s=4) & (door0key=keyfound) : 1.0;
[s5_s6] (s=5) : 1.41421356237;
[s5_s7] (s=5) : 1.0;
[s5_s4d] (s=5) & (door0=open) : 1.0;
[s5_s4k] (s=5) & (door0key=keyfound) : 1.0;
[s7_s5] (s=7) : 1.0;
[s7_s6] (s=7) : 1.0;
[s2_s1] (s=2) : 1.41421356237;
[s2_s0] (s=2) : 1.0;
[s2_s8] (s=2) : 1.41421356237;
[s2_s9] (s=2) : 1.0;
[s2_s3] (s=2) : 1.0;
[s3_s1] (s=3) : 1.0;
[s3_s0] (s=3) : 1.41421356237;
[s3_s8] (s=3) : 1.0;
[s3_s9] (s=3) : 1.41421356237;
[s3_s10] (s=3) : 1.41421356237;
[s3_s2] (s=3) : 1.0;
[s3_s4] (s=3) : 1.41421356237;
[s6_s11] (s=6) : 1.41421356237;
[s6_s7] (s=6) : 1.0;
[s6_s5] (s=6) : 1.41421356237;
[s6_s12] (s=6) : 1.0;
[s9_s8] (s=9) : 1.0;
[s9_s2] (s=9) : 1.0;
[s9_s3] (s=9) : 1.41421356237;
[s8_s9] (s=8) : 1.0;
[s8_s10] (s=8) : 1.0;
[s8_s2] (s=8) : 1.41421356237;
[s8_s3] (s=8) : 1.0;
[s10_s8] (s=10) : 1.0;
[s10_s11d] (s=10) & (door1=open) : 1.0;
[s10_s11k] (s=10) & (door1key=keyfound) : 1.0;
[s10_s3] (s=10) : 1.41421356237;
[s11_s6] (s=11) : 1.41421356237;
[s11_s10d] (s=11) & (door1=open) : 1.0;
[s11_s10k] (s=11) & (door1key=keyfound) : 1.0;
[s11_s12] (s=11) : 1.0;
[s12_s6] (s=12) : 1.0;
[s12_s11] (s=12) : 1.0;
[cdoor0_s4] (s=4) & (door0=unknown) : 1.0;
[cdoor0_s5] (s=5) & (door0=unknown) : 1.0;
[cdoor1_s10] (s=10) & (door1=unknown) : 1.0;
[cdoor1_s11] (s=11) & (door1=unknown) : 1.0;
[lookforkey0_s4] (s=4) & (door0key=unknown) :1.0;
[lookforkey0_s5] (s=5) & (door0key=unknown) :1.0;
[lookforkey1_s10] (s=10) & (door1key=unknown) :1.0;
[lookforkey1_s11] (s=11) & (door1key=unknown) :1.0;
endrewards
