

mdp


       //const double fail = 0.2;
       const int failstate = -1;
       const double p = 0.8;
       const double ps = 1.0;


module world

      // s:[0..failstate] init 0; 
       s:[failstate..6] init 0; 
       //the last state is a fail state
       [v0_v1] (s=0) -> (s'=1);
       [v1_v0] (s=1) -> (s'=0);
       [v1_v2] (s=1) -> p:(s'=2)+(1-p):(s'=failstate);
       [v2_v1] (s=2) -> (s'=1);
       [v2_v3] (s=2) -> (s'=3);
       [v3_v2] (s=3) -> p:(s'=2)+(1-p):(s'=failstate);
       [v3_v4] (s=3) -> p:(s'=4)+(1-p):(s'=failstate);
       [v4_v5] (s=4) -> (s'=5);
       [v4_v3] (s=4) -> (s'=3);
       [v5_v6] (s=5) -> (s'=6);
       [v5_v4] (s=5) -> p:(s'=4)+(1-p):(s'=failstate);
       [v1_v4] (s=1) -> p:(s'=4) + (1-p):(s'=failstate);
       [v6_v5] (s=6) -> (s'=5);

       [failed] (s=failstate) -> (s'=failstate);

endmodule 

label "v0" = s=0; 
label "v1" = s=1; 
label "v2" = s=2; 
label "v3" = s=3; 
label "v4" = s=4;
label "v5" = s=5; 
label "v6" = s=6; 


rewards "time"
//for future use to replace with regexp m-x replace-regexp <ret> ->.+ <ret>  :1.0;
       [v0_v1] (s=0) : 1.0;
       [v1_v0] (s=1) : 1.0;
       [v1_v2] (s=1) : 1.0;
       [v2_v1] (s=2) : 1.0;
       [v2_v3] (s=2) : 1.0;
       [v3_v2] (s=3) : 1.0;
       [v3_v4] (s=3) : 1.0;
       [v4_v5] (s=4) : 1.0;
       [v4_v3] (s=4) : 1.0;
       [v5_v6] (s=5) : 1.0;
       [v5_v4] (s=5) : 1.0;
       [v1_v4] (s=1) : 1.0;
       [v6_v5] (s=6) : 1.0;

	
       [failed] (s=failstate) : 1.0;

endrewards


